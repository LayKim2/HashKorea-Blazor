@using HashKorea.DTOs.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.Security.Claims

@inject IJSRuntime JSRuntime
@inject ISharedService SharedService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

@if (isLoading)
{
    <MudOverlay @bind-Visible="isLoading" DarkBackground="false" ZIndex="9999" AutoClose="true">
        <div id="app" style="margin: 0 auto; width: 100vw; height: 100vh">
            <div style="padding-top: 150px; ">
                <img src="/images/main-icon.png" style="width: 70px; grid-area: 1 / 1 / auto / auto;top: 50%;left: 50%;transform: translate(-50%, -50%);position: absolute;">
                <div style="width: 120px; grid-area: 1 / 1 / auto / auto; top: 50%; left: 50%; transform: translate(-50%, -50%); position: absolute;">
                    <img src="/images/spinner.svg" style="width: 120px; animation-name: spin;animation-duration: 800ms;animation-iteration-count: infinite;animation-timing-function: linear;">
                </div>
            </div>
        </div>
    </MudOverlay>
}
else
{
    <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="Radzen.AlignItems.Center" Class="rz-p-4 rz-pt-12 rz-pb-8">
        <RadzenText TextStyle="TextStyle.H6" Class="fw-bold fs-4 text-muted">
            Total: <span class="text-primary fs-3">@model.Count</span>
        </RadzenText>
        @if (User.Identity?.IsAuthenticated == true)
        {
            <button class="btn btn-primary d-flex align-items-center gap-2 search-button" onclick="@(() => NavigateToAddPost())">
                <RadzenIcon Icon="Add" />
                <span>Post</span>
            </button>
        }
    </RadzenStack>


    <div class="list-container-grid">
        <Virtualize Items="model" Context="item" ItemSize="300" OverscanCount="5">
            <RadzenCard class="list-card" data-id="@item.Id" @onclick="@(() => PostDetail(item.Id))">
                <div class="image-container">
                    <RadzenImage Path="@(string.IsNullOrEmpty(item.MainImageUrl) ? "/images/main-icon.png" : item.MainImageUrl)" class="list-image lazy-image" loading="lazy" />
                </div>
                <div class="card-content">
                    <div class="d-flex justify-content-between align-items-center">
                        <MudChip T="string" Variant="MudBlazor.Variant.Outlined" Color="Color.Secondary">@item.Category</MudChip>
                        <RadzenBadge BadgeStyle="BadgeStyle.Light"
                                     Shade="Shade.Lighter"
                                     IsPill="true"
                                     class="rz-border-radius-10 rz-px-3 rz-py-2 rz-border-1 rz-border-base-200">
                            <RadzenIcon Icon="event" class="rz-mr-1" Style="font-size: 20px; vertical-align: bottom;" />
                            @item.StartDate.ToString("MMM dd") - @item.EndDate.ToString("MMM dd")
                        </RadzenBadge>
                    </div>
                    <RadzenText TextStyle="TextStyle.H6" class="mt-2">@item.Title</RadzenText>
                </div>
            </RadzenCard>
        </Virtualize>
    </div>
}



@code {
    private bool isLoading = true;
    private List<GetPostsResponseDto>? model;

    private ClaimsPrincipal? User { get; set; }

    [Parameter] public string Type { get; set; } = string.Empty;
    [Parameter] public string SearchWord { get; set; } = string.Empty;

    private string previousSearchWord = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;

        await LoadData();
    }

    private BadgeStyle GetCategoryStyle(GetPostsResponseDto item)
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        if (item.EndDate < today)
            return BadgeStyle.Danger;  // Past
        if (item.StartDate <= today && today <= item.EndDate)
            return BadgeStyle.Success;  // Current
        return BadgeStyle.Info;  // Upcoming
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initLazyLoading");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SearchWord != previousSearchWord)
        {
            previousSearchWord = SearchWord;
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;

        var response = await SharedService.GetPosts("promotion", SearchWord);
        if (response.Success)
        {
            model = response.Data;
        }
        else
        {
            // 오류 처리
        }

        isLoading = false;
    }

    private void PostDetail(int postId)
    {
        var currentUrl = NavigationManager.Uri;
        NavigationManager.NavigateTo($"/post/detail/{postId}?returnUrl={Uri.EscapeDataString(currentUrl)}");
    }

    private void NavigateToAddPost()
    {
        // TO DO: should not do redirect
        NavigationManager.NavigateTo("/post/add?type=" + Type, false);
        // NavigationManager.NavigateTo("/post/add", false);

    }

}