@using HashKorea.DTOs.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.Security.Claims

@inject IJSRuntime JSRuntime
@inject ISharedService SharedService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

@if (isLoading)
{
    <RadzenStack Orientation="Radzen.Orientation.Vertical" AlignItems="Radzen.AlignItems.Center" JustifyContent="JustifyContent.Center" Class="rz-m-12" Gap="2rem">
        <RadzenProgressBarCircular Value="100" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        <RadzenText TextStyle="TextStyle.Subtitle1">loading...</RadzenText>
    </RadzenStack>
} else {

    @if (User.Identity?.IsAuthenticated == true) {

    }

    <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="Radzen.AlignItems.Center" Class="rz-p-4">
        <RadzenText TextStyle="TextStyle.H6">Total Results: @model.Count</RadzenText>
        @if (User.Identity?.IsAuthenticated == true)
        {
            <RadzenButton Icon="add" Text="Post" ButtonStyle="ButtonStyle.Primary" Click="@(() => NavigateToAddPost())" />
        }
    </RadzenStack>


    <div class="list-container-grid">
        <Virtualize Items="model" Context="item" ItemSize="300" OverscanCount="5">
            <RadzenCard class="list-card" data-id="@item.Id" @onclick="@(() => PostDetail(item.Id))">
                <div class="image-container">
                    <RadzenImage Path="@(string.IsNullOrEmpty(item.MainImageUrl) ? "/main-icon.png" : item.MainImageUrl)" class="list-image lazy-image" loading="lazy" />
                </div>
                <div class="card-content">
                    <MudChip T="string" Variant="MudBlazor.Variant.Outlined" Color="Color.Secondary">@item.Category</MudChip>
                    <RadzenText TextStyle="TextStyle.H6" class="mt-2">@item.Title</RadzenText>
                </div>
            </RadzenCard>
        </Virtualize>
    </div>
}


@code {
    private bool isLoading = true;
    private List<GetPostsResponseDto>? model;

    private ClaimsPrincipal? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;

        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initLazyLoading");
        }
    }

    private async Task LoadData()
    {
        isLoading = true;

        var response = await SharedService.GetPosts("promotion");
        if (response.Success)
        {
            model = response.Data;
            StateHasChanged();
        }
        else
        {
            // 오류 처리
        }

        isLoading = false;
    }

    private void PostDetail(int postId)
    {
        var currentUrl = NavigationManager.Uri;
        NavigationManager.NavigateTo($"/post/detail/{postId}?returnUrl={Uri.EscapeDataString(currentUrl)}");
    }

    private void NavigateToAddPost()
    {
        NavigationManager.NavigateTo("/post/add");
    }

}