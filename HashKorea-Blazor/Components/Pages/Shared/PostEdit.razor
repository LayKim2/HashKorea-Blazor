@attribute [Authorize]

@page "/post/add"
@page "/post/edit/{PostId:int}"

@using HashKorea.Common.Constants
@using HashKorea.DTOs.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.RegularExpressions

@inject ISharedService SharedService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer


<MudOverlay @bind-Visible="isLoading" DarkBackground="true" ZIndex="9999" AutoClose="true">
    <div id="app" style="margin: 0 auto; width: 100vw; height: 100vh">
        <div style="padding-top: 150px; ">
            <img src="/images/main-icon.png" style="width: 70px; grid-area: 1 / 1 / auto / auto;top: 50%;left: 50%;transform: translate(-50%, -50%);position: absolute;">
            <div style="width: 120px; grid-area: 1 / 1 / auto / auto; top: 50%; left: 50%; transform: translate(-50%, -50%); position: absolute;">
                <img src="/images/spinner.svg" style="width: 120px; animation-name: spin;animation-duration: 800ms;animation-iteration-count: infinite;animation-timing-function: linear;">
            </div>
        </div>
    </div>
</MudOverlay>

<MudPaper Elevation="3" Class="pa-4" Style="height: 100vh; display: flex; flex-direction: column;">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex flex-column gap-2" Style="flex: 1;">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
                @* <ValidationSummary/> *@

            <MudGrid Spacing="2" Class="mb-1">
                <!-- Period -->
                <MudItem xs="12" md="4" Class="mb-2">
                    <MudDateRangePicker Label="Period"
                                        Color="MudBlazor.Color.Info"
                                        Required="true"
                                        DateFormat="MM/dd/yyyy"
                                        AdornmentIcon="@Icons.Material.Filled.CalendarToday"
                                        Variant="MudBlazor.Variant.Outlined"
                                        Dense="true"
                                        DateRange="model.DateRange"
                                        DateRangeChanged="OnDateRangeChanged" />
                </MudItem>

                <!-- Location -->
                <MudItem xs="12" md="4" Class="mb-2">
                    <MudSelect T="string" Label="Location" AdornmentIcon="@Icons.Material.Filled.LocationOn" Required="true"
                               AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Dense="true" Clearable
                               Value="model.LocationCD" ValueChanged="OnLocationChanged" For="@(() => model.LocationCD)">
                        @foreach (var location in locations)
                        {
                            <MudSelectItem Value="@location.Code">@location.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Category -->
                <MudItem xs="12" md="4" Class="mb-2">
                    <MudSelect T="string" Label="Category" AdornmentIcon="@Icons.Material.Filled.Category" Required="true"
                    AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Dense="true" Clearable
                    Value="model.CategoryCD" ValueChanged="OnCategoryChanged" For="@(() => model.CategoryCD)">

                        @foreach (var category in categories)
                        {
                            <MudSelectItem Value="@category.Code">@category.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="12" Class="mb-2">
                    <label class="form-label">Main Image</label>

                    <InputFile OnChange="OnImageSelected" Accept="image/*" />

                    <div class="mt-2">
                        @if (!string.IsNullOrEmpty(model.MainImageUrl))
                        {
                            <div class="d-flex align-items-center gap-2">
                                <img src="@model.MainImageUrl"
                                alt="Preview"
                                style="width: 200px; height: 112px; object-fit: contain; border: 1px solid #ddd; border-radius: 8px;" />
                                <button type="button" class="btn btn-danger btn-sm" @onclick="RemoveImage">X</button>
                            </div>
                        }
                        else
                        {
                            <small class="text-muted">No image selected.</small>
                        }
                    </div>
                </MudItem>

            </MudGrid>

            <!-- Title -->
            <MudTextField @bind-Value="model.Title" For="@(() => model.Title)" Label="Title" Variant="MudBlazor.Variant.Outlined" Dense="true" Class="mb-10"/>

            <!-- TinyMCE -->
            <MudItem Class="mb-2">
                <textarea id="tinymceEditor"></textarea>
            </MudItem>

            <!-- Save  -->
            <MudItem Class="d-flex justify-end mt-4">
                <MudCardActions>
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" ButtonType="MudBlazor.ButtonType.Submit">Save</MudButton>
                </MudCardActions>
            </MudItem>
        </EditForm>
    </MudContainer>
</MudPaper>

@code {
    [Parameter] public int? PostId { get; set; }

    private PostRequestDto model = new PostRequestDto();

    private string postType = string.Empty;

    private bool isDataLoaded = false;
    private bool isContentLoaded = false;
    private bool isLoading = false;

    bool success;

    // TO DO: get commoncode
    private List<GetCommonCodeResponseDto> categories = new()
    {
        new GetCommonCodeResponseDto { Id = 1, Type = "Promotion", Code = "01", Name = "UpComing" },
        new GetCommonCodeResponseDto { Id = 3, Type = "Promotion", Code = "02", Name = "Current" },
        new GetCommonCodeResponseDto { Id = 4, Type = "Promotion", Code = "03", Name = "Past" },
        new GetCommonCodeResponseDto { Id = 5, Type = "Promotion", Code = "04", Name = "Other Information" }
    };

    private List<GetCommonCodeResponseDto> locations = new()
    {
        new GetCommonCodeResponseDto { Id = 1, Type = "Location", Code = "00", Name = "All" },
        new GetCommonCodeResponseDto { Id = 1, Type = "Location", Code = "01", Name = "Seoul" },
        new GetCommonCodeResponseDto { Id = 2, Type = "Location", Code = "02", Name = "Gyeonggi" },
        new GetCommonCodeResponseDto { Id = 3, Type = "Location", Code = "03", Name = "Gangwon" },
        new GetCommonCodeResponseDto { Id = 4, Type = "Location", Code = "04", Name = "Chungbuk" },
        new GetCommonCodeResponseDto { Id = 5, Type = "Location", Code = "05", Name = "Chungnam" },
        new GetCommonCodeResponseDto { Id = 6, Type = "Location", Code = "06", Name = "Jeonbuk" },
        new GetCommonCodeResponseDto { Id = 7, Type = "Location", Code = "07", Name = "Jeonnam" },
        new GetCommonCodeResponseDto { Id = 8, Type = "Location", Code = "08", Name = "Gyeongbuk" },
        new GetCommonCodeResponseDto { Id = 9, Type = "Location", Code = "09", Name = "Gyeongnam" },
        new GetCommonCodeResponseDto { Id = 10, Type = "Location", Code = "10", Name = "Jeju" }
    };

    // add js logic
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isDataLoaded && !isContentLoaded)
        {
            await JSRuntime.InvokeVoidAsync("initTinyMCE", "#tinymceEditor", model.Content ?? "");
            isContentLoaded = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // TO DO: change to set by url parameter => try to parameter set of life ~
        // var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        // if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("type", out var type))
        // {
        //     postType = type;
        //     model.Type = type;

        //     await LoadCategories();
        // }

        postType = "Promotion";

        if (PostId.HasValue)
        {
            await LoadExistingPost(PostId.Value);
        }
        else
        {
            model = new PostRequestDto()
                {
                    Type = postType,
                    DateRange = new DateRange(DateTime.Now, DateTime.Now.AddDays(1))
                };

            isDataLoaded = true;
        }
    }

    private async Task LoadCategories()
    {
        var response = await SharedService.GetCommonCodes(postType);
        if (response.Success && response.Data != null)
        {
            categories = response.Data;
            StateHasChanged();
        }
    }

    private async Task LoadExistingPost(int postId)
    {
        var response = await SharedService.GetPostEdit(postId);

        if (response.Success && response.Data != null)
        {
            var existingPost = response.Data;

            model.PostId = existingPost.Id;
            model.MainImageUrl = existingPost.MainImageStoragePath;
            model.Type = existingPost.Type;
            model.Category = existingPost.Category;
            model.CategoryCD = existingPost.CategoryCD;
            model.Location = existingPost.Location;
            model.LocationCD = existingPost.LocationCD;
            model.DateRange = new DateRange(new DateTime(existingPost.StartDate.Year, existingPost.StartDate.Month, existingPost.StartDate.Day), new DateTime(existingPost.EndDate.Year, existingPost.EndDate.Month, existingPost.EndDate.Day));
            model.Title = existingPost.Title;
            model.Content = existingPost.Content;

            isDataLoaded = true;

        }
        else
        {
            // error message
            model = new();
        }

        StateHasChanged();

    }

    private void OnCategoryChanged(string selectedCode)
    {
        model.SetCategory(selectedCode, categories);
    }

    private void OnLocationChanged(string selectedCode)
    {
        model.SetLocation(selectedCode, locations);
    }

    private void OnDateRangeChanged(DateRange? dateRange)
    {
        model.DateRange = dateRange;
        StateHasChanged();
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var buffer = await ResizeImage(e.File);

        model.MainImageUrl = await JSRuntime.InvokeAsync<string>("createBlobUrlFromBuffer", buffer, "image/jpeg");
    }

    private async Task<byte[]> ResizeImage(IBrowserFile file)
    {
        var resizedImage = await file.RequestImageFileAsync(
            "image/jpeg",
            400,
            225   // 16:9
        );

        using var stream = resizedImage.OpenReadStream();
        var buffer = new byte[resizedImage.Size];
        await stream.ReadAsync(buffer);
        return buffer;
    }

    private void RemoveImage()
    {
        model.MainImageUrl = null;
    }

    private async Task SavePost()
    {
        try
        {
            isLoading = true;

            var editorContent = await JSRuntime.InvokeAsync<string>("getTinyMCEContent", "tinymceEditor");

            var (updatedContent, imageFiles) = await ProcessEditorImages(editorContent);

            model.Content = updatedContent;
            model.ImageFiles = imageFiles;

            await SetMainImageFile();

            var response = await SharedService.UpdatePost(model);
            if (response.Success)
            {
                // TO DO: dynamic
                NavigationManager.NavigateTo("/promotions");
            }
            else
            {
                // error message
            }
        }
        catch (Exception ex)
        {
            // error message
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SetMainImageFile()
    {
        try
        {
            if (string.IsNullOrEmpty(model.MainImageUrl))
            {
                model.MainImageFile = null;
            }
            else if (model.MainImageUrl.Contains("blob"))
            {
                var blob = await JSRuntime.InvokeAsync<byte[]>("fetchBlobData", model.MainImageUrl);
                string fileName = $"mainImage_{DateTime.Now:yyyyMMddHHmmss}.jpg";

                model.MainImageFile = new MultipartFile
                    {
                        FileName = fileName,
                        ContentType = "image/jpeg",
                        Content = blob
                    };
            }
            else
            {
                model.MainImageFile = null;
            }
        }
        catch (Exception ex)
        {
            model.MainImageFile = null;
        }
    }

    private async Task<(string updatedContent, List<MultipartFile> imageFiles)> ProcessEditorImages(string editorContent)
    {
        var blobUrlPattern = @"src=""(blob:[^""]+)""";
        var matches = Regex.Matches(editorContent, blobUrlPattern);

        var imageFiles = new List<MultipartFile>();
        var updatedContent = editorContent;

        foreach (Match match in matches)
        {
            var blobUrl = match.Groups[1].Value;
            var placeholder = $"{{{{image_{imageFiles.Count}}}}}";

            updatedContent = updatedContent.Replace(blobUrl, placeholder);

            try
            {
                var blob = await JSRuntime.InvokeAsync<byte[]>("fetchBlobData", blobUrl);

                var file = new MultipartFile
                    {
                        FileName = $"image_{imageFiles.Count}.png",
                        ContentType = "image/png",
                        Content = blob
                    };

                imageFiles.Add(file);
            }
            catch (Exception ex)
            {
                // error message
            }
        }

        return (updatedContent, imageFiles);
    }

    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        await SavePost();
    }
}
