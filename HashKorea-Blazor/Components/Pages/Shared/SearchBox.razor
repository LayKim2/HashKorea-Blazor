@rendermode InteractiveServer


<div class="search-container d-flex align-items-center flex-wrap gap-3 p-3 bg-white rounded-3 shadow-sm w-100">
    <div class="dropdown flex-grow-1">
        <MudItem>
            <MudDateRangePicker Label="Period"
                                Variant="MudBlazor.Variant.Outlined"
                                AdornmentIcon="@Icons.Material.Filled.CalendarToday"
                                Color="Color.Primary"
                                DateRange="@dateRange"
                                DateRangeChanged="OnDateRangeChanged" />
        </MudItem>
    </div>

    <div class="dropdown flex-grow-1">
        <MudItem>
            <MudSelect T="string" Label="Category"
                       AdornmentIcon="@Icons.Material.Filled.Category"
                       Variant="MudBlazor.Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter"
                       Value="selectedCategory" ValueChanged="OnCategoryChanged">
                <MudSelectItem Value="@("all")">All</MudSelectItem>
                <MudSelectItem Value="@("category1")">Category 1</MudSelectItem>
                <MudSelectItem Value="@("category2")">Category 2</MudSelectItem>
            </MudSelect>
        </MudItem>
    </div>

    <div class="dropdown flex-grow-1">
        <MudItem>
            <MudSelect T="string" Label="Category"
                       AdornmentIcon="@Icons.Material.Filled.Category"
                       Variant="MudBlazor.Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter"
                       Value="selectedCategory" ValueChanged="OnCategoryChanged">
                <MudSelectItem Value="@("all")">All</MudSelectItem>
                <MudSelectItem Value="@("category1")">Category 1</MudSelectItem>
                <MudSelectItem Value="@("category2")">Category 2</MudSelectItem>
            </MudSelect>
        </MudItem>
    </div>

    <div class="search-input-wrapper">
        <MudTextField T="string"
                      Placeholder="Enter search keywords..."
                      Variant="MudBlazor.Variant.Outlined"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Value="@SearchWord"
                      ValueChanged="@((string s) => OnInputChange(s))"
                      OnKeyDown="OnKeyDown"
                      Immediate="true" />
    </div>

    <button class="btn btn-primary d-flex align-items-center gap-2 search-button" onclick="@(() => OnSearchClick())">
        <RadzenIcon Icon="search" />
        <span>Search</span>
    </button>

</div>

@code {
    private string SearchWord = string.Empty;

    [Parameter] public EventCallback<string> OnSearchChanged { get; set; }

    private void OnInputChange(string word)
    {
        SearchWord = word;
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnSearchClick();
        }
    }

    private async Task OnSearchClick()
    {
        if (OnSearchChanged.HasDelegate)
        {
            await OnSearchChanged.InvokeAsync(SearchWord);
        }

    }

    private DateRange dateRange;
    private string selectedLocation;
    private string selectedCategory;

    private void OnDateRangeChanged(DateRange range)
    {
        dateRange = range;
        // 추가 로직
    }

    private void OnLocationChanged(string location)
    {
        selectedLocation = location;
        // 추가 로직
    }

    private void OnCategoryChanged(string category)
    {
        selectedCategory = category;
        // 추가 로직
    }
}
