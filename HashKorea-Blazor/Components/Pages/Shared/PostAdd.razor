@attribute [Authorize]

@page "/post/add"
@page "/post/edit/{PostId:int}"

@using HashKorea.Common.Constants
@using HashKorea.DTOs.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.RegularExpressions

@inject ISharedService SharedService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<MudPaper Elevation="3" Class="pa-4" Style="height: 100vh; display: flex; flex-direction: column;">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex flex-column gap-2" Style="flex: 1;">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            @* <ValidationSummary/> *@

            <MudGrid Spacing="2" Class="mb-1">
                <!-- Period -->
                <MudItem xs="12" md="4" Class="mb-2">
                    <MudSelect T="string" Label="Period" AdornmentIcon="@Icons.Material.Filled.CalendarToday"
                               AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Dense="true" Clearable Disabled>
                    </MudSelect>
                </MudItem>

                <!-- Location -->
                <MudItem xs="12" md="4" Class="mb-2">
                    <MudSelect T="string" Label="Location" AdornmentIcon="@Icons.Material.Filled.LocationOn"
                               AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Dense="true" Clearable Disabled>
                    </MudSelect>
                </MudItem>

                <!-- Category -->
                <MudItem xs="12" md="4" Class="mb-2">
                    <MudSelect T="string" Label="Category" AdornmentIcon="@Icons.Material.Filled.Category"
                               AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Dense="true" Clearable
                               @bind-Value="model.CategoryCD"
                               For="@(() => model.CategoryCD)">
                        @foreach (var category in categories)
                        {
                            <MudSelectItem Value="@category.Code">@category.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <!-- Title -->
            <MudTextField @bind-Value="model.Title" For="@(() => model.Title)" Label="Title" Variant="MudBlazor.Variant.Outlined" Dense="true" Class="mb-10"/>

            <!-- TinyMCE -->
            <MudItem Class="mb-2">
                <textarea id="tinymceEditor"></textarea>
            </MudItem>

            <!-- Save  -->
            <MudItem Class="d-flex justify-end mt-4">
                <MudCardActions>
                    <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" ButtonType="MudBlazor.ButtonType.Submit">Save</MudButton>
                </MudCardActions>
            </MudItem>
        </EditForm>
    </MudContainer>
</MudPaper>

@code {
    [Parameter] public int? PostId { get; set; }

    private PostRequestDto model = new PostRequestDto();

    private string postType = string.Empty;

    private string postTitle = string.Empty;

    private List<GetCommonCodeResponseDto> categories = new();

    private string selectedCategoryCode;

    bool success;

    // add js logic
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initTinyMCE", "#tinymceEditor");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("type", out var type))
        {
            postType = type;
            await LoadCategories();
        }

        if (PostId.HasValue)
        {
            await LoadExistingPost(PostId.Value);
        }
    }

    private async Task LoadCategories()
    {
        var response = await SharedService.GetCommonCodes(postType);
        if (response.Success && response.Data != null)
        {
            categories = response.Data;
        }
    }

    private async Task LoadExistingPost(int postId)
    {
        var response = await SharedService.GetPostEdit(postId);

        if (response.Success && response.Data != null)
        {
            var existingPost = response.Data;

            model.PostId = existingPost.Id;
            model.Type = existingPost.Type;
            model.Category = existingPost.Category;
            model.CategoryCD = existingPost.CategoryCD;
            model.Title = existingPost.Title;
            model.Content = existingPost.Content;
        } else {
            // error message
        }
    }

    private async Task SavePost()
    {

        try
        {
            var editorContent = await JSRuntime.InvokeAsync<string>("getTinyMCEContent", "tinymceEditor");

            var (updatedContent, imageFiles) = await ProcessEditorImages(editorContent);

            var selectedCategory = categories.FirstOrDefault(c => c.Code == selectedCategoryCode);

            var requestModel = new PostRequestDto
                {
                    PostId = PostId,
                    Type = postType,
                    Category = selectedCategory?.Name ?? string.Empty,
                    CategoryCD = selectedCategoryCode,
                    Title = postTitle,
                    Content = updatedContent,
                    ImageFiles = imageFiles
                };

            var response = await SharedService.UpdatePost(requestModel);
            if (response.Success)
            {
                NavigationManager.NavigateTo("/posts");
            }
            else
            {
                // error message
            }
        }
        catch (Exception ex)
        {
            // error message
        }
    }

    private async Task<(string updatedContent, List<MultipartFile> imageFiles)> ProcessEditorImages(string editorContent)
    {
        var blobUrlPattern = @"src=""(blob:[^""]+)""";
        var matches = Regex.Matches(editorContent, blobUrlPattern);

        var imageFiles = new List<MultipartFile>();
        var updatedContent = editorContent;

        foreach (Match match in matches)
        {
            var blobUrl = match.Groups[1].Value;
            var placeholder = $"{{{{image_{imageFiles.Count}}}}}";

            updatedContent = updatedContent.Replace(blobUrl, placeholder);

            try
            {
                var blob = await JSRuntime.InvokeAsync<byte[]>("fetchBlobData", blobUrl);

                var file = new MultipartFile
                    {
                        FileName = $"image_{imageFiles.Count}.png",
                        ContentType = "image/png",
                        Content = blob
                    };

                imageFiles.Add(file);
            }
            catch (Exception ex)
            {
                // error message
            }
        }

        return (updatedContent, imageFiles);
    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}
