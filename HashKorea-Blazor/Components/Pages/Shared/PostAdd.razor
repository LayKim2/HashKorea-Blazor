@attribute [Authorize]

@page "/post/add"
@page "/post/edit/{PostId:int}"

@using HashKorea.Common.Constants
@using HashKorea.DTOs.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Tizzani.MudBlazor.HtmlEditor

@inject ISharedService SharedService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<MudPaper Elevation="3" Class="pa-4" Style="height: 100vh; display: flex; flex-direction: column;">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex flex-column gap-2" Style="flex: 1;">
        <MudGrid Spacing="2" Class="mb-1">
            <MudItem xs="12" md="4">
                <MudSelect T="string" Label="Period" AdornmentIcon="@Icons.Material.Filled.CalendarToday"
                           AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@("all")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect T="string" Label="Location" AdornmentIcon="@Icons.Material.Filled.LocationOn"
                           AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Dense="true" Clearable>
                    <MudSelectItem Value="@("all")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect T="string" Label="Category" AdornmentIcon="@Icons.Material.Filled.Category"
                           AnchorOrigin="Origin.BottomCenter" Variant="MudBlazor.Variant.Outlined" Dense="true" Clearable
                           @bind-Value="selectedCategoryCode">
                    @foreach (var category in categories)
                    {
                        <MudSelectItem Value="@category.Code">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudTextField @bind-Value="postTitle" Label="Title" Variant="MudBlazor.Variant.Outlined" Dense="true" Class="mb-1" />

        <MudHtmlEditor @ref="htmlEditor">
            <MudHtmlToolbarOptions InsertImage="true" />
        </MudHtmlEditor>

        <MudItem Class="d-flex justify-end mt-4">
            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="SavePost">Save</MudButton>
        </MudItem>
    </MudContainer>
</MudPaper>

@code {
    [Parameter] public int? PostId { get; set; }

    private string postType = string.Empty;

    private string postTitle = string.Empty;

    private MudHtmlEditor htmlEditor;

    private List<GetCommonCodeResponseDto> categories = new();

    private string selectedCategoryCode;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("type", out var type))
        {
            postType = type;
            await LoadCategories();
        }

        if (PostId.HasValue)
        {
            await LoadExistingPost();
        }
    }

    private async Task LoadCategories()
    {
        var response = await SharedService.GetCommonCodes(postType);
        if (response.Success)
        {
            categories = response.Data;
        }
    }

    private async Task LoadExistingPost()
    {
        // Implement logic to load existing post data
    }

    private async Task SavePost()
    {
        var content = await htmlEditor.GetHtml();
        var selectedCategory = categories.FirstOrDefault(c => c.Code == selectedCategoryCode);

        var requestModel = new PostRequestDto
            {
                PostId = PostId,
                Type = postType,
                Category = selectedCategory?.Name ?? string.Empty,
                CategoryCD = selectedCategoryCode,
                Title = postTitle,
                Content = content,
            };

        var response = await SharedService.AddPost(requestModel);
        if (response.Success)
        {
            NavigationManager.NavigateTo("/posts");
        }
        else
        {
            // Handle error
        }
    }
    
}
