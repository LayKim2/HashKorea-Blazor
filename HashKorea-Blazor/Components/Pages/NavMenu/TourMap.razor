@rendermode InteractiveServer

@page "/tourmap"
@using System.Text.Json
@using HashKorea.DTOs.TourMap
@using HashKorea_Blazor.Components.Pages.Shared
@using HashKorea_Blazor.Components.Pages.TourMap
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject ITourMapService TourMapService

@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container-fluid p-4">
    <div class="d-flex justify-content-between align-items-center mb-3">

        <!-- Show My Location -->
        <button id="locate-btn" class="btn btn-primary">
            <i class="fas fa-map-marker-alt"></i> Show My Location
        </button>

        <!-- Add Pin -->
        @if (User.Identity?.IsAuthenticated == true)
        {
            <button @onclick="OpenModal" class="btn btn-success">
                <i class="fas fa-thumbtack"></i> Add Pin
            </button>
        }
    </div>

    <!-- Map -->
    <div id="map" class="rounded shadow" style="height: 85vh; width: 100%;"></div>
</div>


@if (User.Identity?.IsAuthenticated == true && isModalVisible)
{
    <Modal Title="Add Pin to Tour Map" IsVisible="isModalVisible" OnClose="CloseModal">
        <ChildContent>
            <TourMapEdit @ref="TourMapEditInstance" shouldInitializeMap="shouldInitializeMap" OnClose="CloseModal" OnSave="HandleSavePin" />
        </ChildContent>
        <FooterContent>
            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Size="Size.Large" @onclick="() => TourMapEditInstance.SavePin()">
                Add
            </MudButton>
        </FooterContent>
    </Modal>
}



@code {
    private ClaimsPrincipal? User { get; set; }

    private List<GetTourMapsResponseDto> tourMaps = new List<GetTourMapsResponseDto>();
    
    private IJSObjectReference? _googleMapsModule;

    private async Task LoadTourMaps()
    {
        var response = await TourMapService.GetTourMaps();
        if (response.Success)
        {
            tourMaps = response.Data;
        }
    }

    private async Task InitializeMap()
    {
        var apiKey = Configuration["GOOGLE_MAPS_API_KEY"];

        var locations = tourMaps.Select(map => new
        {
            Id = map.Id,
            Title = map.Title,
            Category = map.Category,
            Lat = map.Lat,
            Lng = map.Lng,
            EnglishAddress = map.EnglishAddress,
            KoreanAddress = map.KoreanAddress
        }).ToList();

        var locationsJson = JsonSerializer.Serialize(locations);

        await JSRuntime.InvokeVoidAsync("loadGoogleMapsScript", apiKey, "initMap", locationsJson);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;

        await LoadTourMaps();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMap();
        }
    }

    #region modal

    private TourMapEdit TourMapEditInstance { get; set; } // for modal

    private bool isModalVisible = false;
    private bool shouldInitializeMap = true;

    private async Task OpenModal()
    {
        isModalVisible = true;
        shouldInitializeMap = true;

        // Prevent body from scrolling when modal is open
        await JSRuntime.InvokeVoidAsync("addBodyClass", "modal-open");
    }

    private async Task CloseModal()
    {
        isModalVisible = false;
        shouldInitializeMap = false;
        await JSRuntime.InvokeVoidAsync("removeBodyClass", "modal-open");
    }

    private async Task HandleSavePin()
    {
        await LoadTourMaps();
        await InitializeMap();
    }

    #endregion

}
