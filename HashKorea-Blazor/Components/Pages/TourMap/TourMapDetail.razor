@page "/tourmap/{Id:int}"

@using HashKorea.DTOs.TourMap
@using HashKorea_Blazor.Components.Pages.Shared
@using Radzen
@using MudBlazor

@inject IJSRuntime JSRuntime
@inject ITourMapService TourMapService

@inject Radzen.DialogService RadZenDialogService

<RadzenCard Class="p-4">
    <RadzenRow>
        <!-- Left Panel -->
        <RadzenColumn Size="4" Class="d-none d-md-block">
            <RadzenImage Path="https://media.istockphoto.com/id/1676101015/ko/%EC%82%AC%EC%A7%84/%EA%B2%BD%EB%B3%B5%EA%B6%81%EC%9D%80-%EC%84%9D%EC%96%91%EC%9D%B4-%EC%95%84%EB%A6%84%EB%8B%B5%EA%B3%A0-%EC%84%9C%EC%9A%B8-%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD.jpg?s=612x612&amp;w=0&amp;k=20&amp;c=gKZvvJAShxWls229xvzBJlCHJMJF9rOJn-yOYn1ACeA=" Style="width: 100%; border-radius: 8px;" />

            <div class="text-center mt-3">
                <h3 class="text-dark fw-bold fs-3 lh-sm">@tourMaps.Title</h3>
                <p class="text-muted fs-5 mt-2">@tourMaps.EnglishAddress</p>
            </div>

            <div class="list-group">
                <h5>Comments</h5>

                <!-- Comment Input -->
                <div class="mt-3 p-3 border rounded">
                    <label for="newComment" class="form-label">Add a Comment</label>
                    <textarea id="newComment" class="form-control" rows="2" @bind="newComment"></textarea>
                    <button class="btn btn-primary mt-2" @onclick="AddComment">Post</button>
                </div>

                @foreach (var comment in tourMaps.Comments)
                {
                    <div class="list-group-item d-flex align-items-center p-3 border rounded mb-2">
                        <span class="badge bg-primary rounded-circle p-3 me-3">@comment.Initial</span>
                        <div>
                            <strong>@comment.UserName</strong>
                            <p class="mb-0">@comment.Comment</p>
                        </div>
                    </div>
                }

            </div>
        </RadzenColumn>

        <!-- Right Panel (Desktop) -->
        <RadzenColumn Size="8" Class="d-none d-md-block">
            <MudTabs>
                <MudTabPanel Text="Review" Class="p-0 mb-1">
                    <div class="d-flex align-items-center mb-3">
                        <h2 class="me-3">@tourMaps.AverageRating.ToString("0.0")</h2>
                        <div>
                            <div>
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= Math.Floor(tourMaps.AverageRating))
                                    {
                                        <i class="fas fa-star text-warning"></i>
                                    }
                                    else if (i == Math.Ceiling(tourMaps.AverageRating) && tourMaps.AverageRating % 1 != 0)
                                    {
                                        <i class="fas fa-star-half-alt text-warning"></i>
                                    }
                                    else
                                    {
                                        <i class="far fa-star text-warning"></i>
                                    }
                                }
                            </div>

                            <small>@(tourMaps.NumberOfReviews) reviews</small>
                        </div>
                    </div>
                    <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                        <MudButton OnClick="OpenModal">Write a Review</MudButton>
                    </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>

                    <div class="list-group">
                        @foreach (var review in tourMaps.Reviews)
                        {
                            <div class="list-group-item p-3 border rounded mb-2">
                                <div class="d-flex align-items-center">
                                    <span class="badge bg-secondary rounded-circle p-3 me-3">@review.Initial</span>
                                    <div>
                                        <strong>@review.UserName</strong>
                                        <small class="text-muted">@review.CreatedDateRelative</small>
                                        <div class="text-warning">
                                            @for (int i = 0; i < 5; i++)
                                            {
                                                if (i < review.Rating)
                                                {
                                                    <span>★</span>
                                                }
                                                else
                                                {
                                                    <span>☆</span>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                                <p class="mt-2">@review.Comment</p>

                                @if (review.IsOwner)
                                {
                                    <div class="d-flex justify-content-end mt-2">
                                        <MudButton Color="Color.Primary" OnClick="() => EditReview(review.Id)">Edit</MudButton>
                                        <MudButton Color="Color.Error" OnClick="() => DeleteReview(review.Id)">Delete</MudButton>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </MudTabPanel>
                <MudTabPanel Text="Blog" Class="p-0 mb-1">
                    <p>section of blog content</p>
                </MudTabPanel>
            </MudTabs>
        </RadzenColumn>
    </RadzenRow>

    <!-- Mobile Review & Blog Tabs -->
    <div class="d-block d-md-none mt-4">
        <RadzenColumn Size="12">
            <RadzenImage Path="https://media.istockphoto.com/id/1676101015/ko/%EC%82%AC%EC%A7%84/%EA%B2%BD%EB%B3%B5%EA%B6%81%EC%9D%80-%EC%84%9D%EC%96%91%EC%9D%B4-%EC%95%84%EB%A6%84%EB%8B%B5%EA%B3%A0-%EC%84%9C%EC%9A%B8-%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD.jpg?s=612x612&amp;w=0&amp;k=20&amp;c=gKZvvJAShxWls229xvzBJlCHJMJF9rOJn-yOYn1ACeA=" Style="width: 100%; border-radius: 8px;" />
            <div class="text-center mt-3">
                <h3 class="text-dark fw-bold fs-3 lh-sm">@tourMaps.Title</h3>
                <p class="text-muted fs-5 mt-2">@tourMaps.EnglishAddress</p>
            </div>
        </RadzenColumn>

        <!-- Mobile Comments Section -->
        <MudExpansionPanel Text="Comments" Class="mt-4">

            <!-- Comment Input -->
            <div class="mt-3 p-3 border rounded">
                <label for="newComment" class="form-label">Add a Comment</label>
                <textarea id="newComment" class="form-control" rows="2" @bind="newComment"></textarea>
                <button class="btn btn-primary mt-2" @onclick="AddComment">Post</button>
            </div>

            <div class="list-group">
                @foreach (var comment in tourMaps.Comments)
                {
                    <div class="list-group-item d-flex align-items-center p-3 border rounded mb-2">
                        <span class="badge bg-primary rounded-circle p-3 me-3">@comment.Initial</span>
                        <div>
                            <strong>@comment.UserName</strong>
                            <p class="mb-0">@comment.Comment</p>
                        </div>
                    </div>
                }
            </div>

        </MudExpansionPanel>

        <MudTabs>
            <MudTabPanel Text="Review" Class="p-0 mb-1">
                <div class="d-flex align-items-center mb-3">
                    <h2 class="me-3">@tourMaps.AverageRating.ToString("0.0")</h2>
                    <div>
                        <div>
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Math.Floor(tourMaps.AverageRating))
                                {
                                    <i class="fas fa-star text-warning"></i>
                                }
                                else if (i == Math.Ceiling(tourMaps.AverageRating) && tourMaps.AverageRating % 1 != 0)
                                {
                                    <i class="fas fa-star-half-alt text-warning"></i>
                                }
                                else
                                {
                                    <i class="far fa-star text-warning"></i>
                                }
                            }
                        </div>

                        <small>@(tourMaps.NumberOfReviews) reviews</small>
                    </div>
                </div>
                <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                    <MudButton OnClick="OpenModal">Write a Review</MudButton>
                </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>

                <div class="list-group">
                    @foreach (var review in tourMaps.Reviews)
                    {
                        <div class="list-group-item p-3 border rounded mb-2">
                            <div class="d-flex align-items-center">
                                <span class="badge bg-secondary rounded-circle p-3 me-3">@review.Initial</span>
                                <div>
                                    <strong>@review.UserName</strong>
                                    <small class="text-muted">@review.CreatedDateRelative</small>
                                    <div class="text-warning">
                                        @for (int i = 0; i < 5; i++)
                                        {
                                            if (i < review.Rating)
                                            {
                                                <span>★</span>
                                            }
                                            else
                                            {
                                                <span>☆</span>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                            <p class="mt-2">@review.Comment</p>
                        </div>
                    }
                </div>
            </MudTabPanel>

            <MudTabPanel Text="Blog" Class="p-0 mb-1">
                <p>section of blog content</p>
            </MudTabPanel>
        </MudTabs>
    </div>

</RadzenCard>

<Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
    <Modal Title="Review" IsVisible="isModalVisible" OnClose="CloseModal">
        <ChildContent>
            <TourMapReview @ref="TourMapReviewInstance" TourMapId="@Id" OnClose="CloseModal" OnSave="HandleSavePin" />
        </ChildContent>
        <FooterContent>
            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" Size="Size.Large" @onclick="() => TourMapReviewInstance.AddReview()">
                Review
            </MudButton>
        </FooterContent>
    </Modal>
</Microsoft.AspNetCore.Components.Authorization.AuthorizeView>

@code {
    [Parameter] public int Id { get; set; }

    private string newComment { get; set; } = string.Empty;

    private GetTourMapsResponseDto tourMaps = new GetTourMapsResponseDto();

    private async Task GetTourMapDetail()
    {

        var response = await TourMapService.GetTourMapDetail(Id);
        if (response.Success && response.Data != null)
        {
            tourMaps = response.Data;
        }
        else
        {

        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetTourMapDetail();
    }

    private async Task AddComment()
    {
        if (!string.IsNullOrWhiteSpace(newComment))
        {
            var request = new TourMapCommentRequestDto
                {
                    TourMapId = tourMaps.Id,
                    Comment = newComment
                };

            var response = await TourMapService.AddTourMapComment(request);

            if (response.Success)
            {
                newComment = string.Empty;

                await GetTourMapDetail();
            }
            else
            {

            }
        }
    }

    #region modal

    private TourMapReview TourMapReviewInstance { get; set; } // for modal

    private bool isModalVisible = false;
    private bool shouldInitializeMap = true;

    private async Task OpenModal()
    {
        isModalVisible = true;
        shouldInitializeMap = true;

        // Prevent body from scrolling when modal is open
        await JSRuntime.InvokeVoidAsync("addBodyClass", "modal-open");
    }

    private async Task CloseModal()
    {
        isModalVisible = false;
        shouldInitializeMap = false;
        await JSRuntime.InvokeVoidAsync("removeBodyClass", "modal-open");
    }

    private async Task HandleSavePin()
    {
        await GetTourMapDetail();
    }

    async Task EditReview(int reviewId) {
        await OpenModal();
    }

    async Task DeleteReview(int reviewId)
    {
        var dialogResult = await RadZenDialogService.Confirm("Are you sure to delete? ", "Delete Review", new Radzen.ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (dialogResult != null && dialogResult.Value) {
            await TourMapService.DeleteTourMapReview(reviewId);
        }
    }

    #endregion

}


