@attribute [Authorize]
@rendermode InteractiveServer

@page "/tourmap/post/add"
@using System.Text.Json
@using HashKorea.Common.Constants
@using HashKorea.DTOs.Shared
@using HashKorea.DTOs.TourMap
@using Microsoft.AspNetCore.Authorization

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject ITourMapService TourMapService
@inject ISharedService SharedService


<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex flex-column gap-2" Style="flex: 1;">
    <EditForm Model="@request" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />

        <!-- Title Section -->
        <MudGrid Spacing="3">
            <MudItem xs="12">
                <MudTextField Label="Title" T="string" @bind-Value="request.Title" For="@(() => request.Title)" Placeholder="Enter title" Variant="MudBlazor.Variant.Outlined" FullWidth />
            </MudItem>

            <!-- Category Section -->
            <MudItem xs="12">
                <MudSelect T="string" Label="Category" Variant="MudBlazor.Variant.Outlined" FullWidth Required="true"
                           Value="request.CategoryCD" ValueChanged="OnCategoryChanged" For="@(() => request.CategoryCD)">
                    @foreach (var category in categories)
                    {
                        <MudSelectItem Value="@category.Code">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Location Section -->
            <MudItem xs="12">
                <MudTextField id="search-box" Label="Search Location" T="string" Placeholder="Search for places..." Variant="MudBlazor.Variant.Outlined" FullWidth />
            </MudItem>

            <!-- Map Section -->
            <MudItem xs="12">
                <div id="addMap" style="width: 100%; height: 0; padding-top: 100%; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); position: relative;"></div>
            </MudItem>

        </MudGrid>
    </EditForm>
</MudContainer>


@code {
    [Parameter] public bool shouldInitializeMap { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private TourMapRequestDto request = new TourMapRequestDto();

    private List<GetCommonCodeResponseDto> categories = new();

    bool success;

    private void OnCategoryChanged(string selectedCode)
    {
        request.SetCategory(selectedCode, categories);
    }

    // Load Google Maps and set up the search box
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && shouldInitializeMap)
        {
            var apiKey = Configuration["GOOGLE_MAPS_API_KEY"];

            var locationsJson = JsonSerializer.Serialize(new List<Location>());

            await JSRuntime.InvokeVoidAsync("loadGoogleMapsScript", apiKey, "initMap", locationsJson);
            await LoadCategories();

            shouldInitializeMap = false; 
            StateHasChanged();

        }
    }

    private async Task LoadCategories()
    {
        var response = await SharedService.GetCommonCodes(POST_TYPE.TOURMAP);
        if (response.Success && response.Data != null)
        {
            categories = response.Data.Where(cc => cc.Type == POST_TYPE.TOURMAP).ToList();
            StateHasChanged();
        }
    }


    public async Task SavePin()
    {
        // Call JavaScript function to get the map center coordinates
        var mapCenter = await JSRuntime.InvokeAsync<Location>("getMapCenter");

        if (mapCenter == null)
        {
            return;
        }

        request.Lat = mapCenter.Lat;
        request.Lng = mapCenter.Lng;
        request.EnglishAddress = mapCenter.EnglishAddress;
        request.KoreanAddress = mapCenter.KoreanAddress;

        var response = await TourMapService.UpdateTourMap(request);

        if (response.Success)
        {
            await CloseModal();
            await OnSave.InvokeAsync();
        }
        else
        {
            // error message
        }
        
    }

    public class Location
    {
        public string Title { get; set; }
        public double Lat { get; set; }
        public double Lng { get; set; }
        public string EnglishAddress { get; set; }
        public string KoreanAddress { get; set; }
    }

    private async void OnValidSubmit(EditContext context)
    {
        success = true;
        await SavePin();
    }

}