@attribute [Authorize]

@rendermode InteractiveServer

@using HashKorea.DTOs.Shared
@using HashKorea.DTOs.TourMap
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject ITourMapService TourMapService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<RadzenTemplateForm TItem="TourMapReviewRequestDto" Data="@newReview" Submit="AddReview">
    <DataAnnotationsValidator />

    <div class="card p-3">
        <div class="mb-3">
            <div class="stars">
                @for (int i = 1; i <= 5; i++)
                {
                    var rating = i;
                    <span class="star @(rating <= newReview.Rating ? "active" : "")"
                    @onclick="() => SetRating(rating)"
                    @onmouseover="() => HandleMouseOver(rating)"
                    @onmouseout="HandleMouseOut">
                        ★
                    </span>
                }
            </div>
            <div class="text-danger">
                <ValidationMessage For="@(() => newReview.Rating)" />
            </div>

        </div>

        <div class="mb-3">
            <InputTextArea @bind-Value="newReview.Comment"
            class="form-control border-light"
            placeholder="Share details of your own experience at this place"
            rows="4"/>
            <div class="text-danger mt-1">
                <ValidationMessage For="@(() => newReview.Comment)" />
            </div>
        </div>

        <div>
            <MudButton HtmlTag="label"
            Color="Color.Primary"
            Variant="MudBlazor.Variant.Outlined"
            StartIcon="@Icons.Material.Filled.CloudUpload"
            for="fileInput">
                Add photos & videos
                <InputFile id="fileInput"
                OnChange="OnImagesSelected"
                Accept="image/*"
                multiple
                hidden />
            </MudButton>
            <div class="mt-2">
                @if (newReview.ImageUrlList != null && newReview.ImageUrlList.Any())
                {
                    <div class="d-flex flex-row overflow-auto gap-2" style="max-width: 100%; max-height: 200px;">
                        @foreach (var imageUrl in newReview.ImageUrlList)
                        {
                            <div class="d-flex flex-column align-items-center gap-2">
                                <img src="@imageUrl"
                                alt="Preview"
                                style="width: 150px; height: 84px; object-fit: contain; border: 1px solid #ddd; border-radius: 8px;" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                Color="Color.Error"
                                Size="Size.Small"
                                OnClick="() => RemoveImage(imageUrl)" />
                            </div>
                        }
                    </div>
                }
            </div>

        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter] public int TourMapId { get; set; }
    [Parameter] public int? ReviewId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }

    private TourMapReviewRequestDto newReview = new();

    private int hoverRating = 0;
    private int currentReivewId = 0;

    protected override async Task OnParametersSetAsync() {

        if (ReviewId.HasValue && currentReivewId != ReviewId.Value)
        {
            var response = await TourMapService.GetTourMapReview(ReviewId.Value);

            if (response.Success && response.Data != null)
            {
                newReview = new TourMapReviewRequestDto()
                    {
                        ReviewId = response.Data.Id,
                        TourMapId = response.Data.TourMapId,
                        Comment = response.Data.Comment,
                        Rating = response.Data.Rating,
                        ImageUrlList = response.Data.Images
                    };

                currentReivewId = response.Data.Id;
            }
        }
        else
        {
            newReview.TourMapId = TourMapId;
        }
    }

    private void SetRating(int rating)
    {
        newReview.Rating = rating;
    }

    private void HandleMouseOver(int rating)
    {
        hoverRating = rating;
    }

    private void HandleMouseOut()
    {
        hoverRating = 0;
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    public async Task AddReview()
    {
        var validationResults = new List<ValidationResult>();
        var validationContext = new ValidationContext(newReview);
        bool isValid = Validator.TryValidateObject(newReview, validationContext, validationResults, true);

        if (isValid)
        {
            await SetImageFiles();

            var response = await TourMapService.AddOrUpdateTourMapReview(newReview);

            if (response.Success)
            {
                newReview = new();

                await OnSave.InvokeAsync();
                await CloseModal();
            }
        }
        else
        {
            Snackbar.Clear();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            foreach (var validationResult in validationResults)
            {
                Snackbar.Add(validationResult.ErrorMessage, Severity.Error);
            }
        }
    }

    private async Task OnImagesSelected(InputFileChangeEventArgs e)
    {
        var imageUrls = new List<string>();

        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = await ResizeImage(file);
            var imageUrl = await JSRuntime.InvokeAsync<string>("createBlobUrlFromBuffer", buffer, "image/jpeg");
            imageUrls.Add(imageUrl);
        }

        newReview.ImageUrlList.AddRange(imageUrls);

    }

    private async Task<byte[]> ResizeImage(IBrowserFile file)
    {
        var resizedImage = await file.RequestImageFileAsync(
            "image/jpeg",
            400,
            225   // 16:9
        );

        using var stream = resizedImage.OpenReadStream();
        var buffer = new byte[resizedImage.Size];
        await stream.ReadAsync(buffer);
        return buffer;
    }

    private void RemoveImage(string imageUrl)
    {
        newReview.ImageUrlList.Remove(imageUrl);
    }

    private async Task SetImageFiles()
    {
        try
        {
            if (newReview.ImageUrlList == null || !newReview.ImageUrlList.Any())
            {
                newReview.ImageUrlFileList = new List<MultipartFile>();
            }

            foreach (var imageUrl in newReview.ImageUrlList)
            {
                if (imageUrl.Contains("blob"))
                {
                    var blob = await JSRuntime.InvokeAsync<byte[]>("fetchBlobData", imageUrl);
                    string fileName = $"reviewImage_{DateTime.Now:yyyyMMddHHmmss}.jpg";

                    var multipartFile = new MultipartFile
                        {
                            FileName = fileName,
                            ContentType = "image/jpeg",
                            Content = blob
                        };

                    newReview.ImageUrlFileList.Add(multipartFile);
                }
            }
        }
        catch (Exception ex)
        {
            newReview.ImageUrlFileList = new List<MultipartFile>();
        }
    }

}
